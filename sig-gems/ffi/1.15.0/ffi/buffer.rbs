module FFI
  class Buffer < FFI::AbstractMemory
    def self.alloc_in: (Integer | Symbol | _Size size, ?Integer count, ?bool clear) -> instance
    alias self.new_in self.alloc_in

    def self.alloc_inout: (Integer | Symbol | _Size size, ?Integer count, ?bool clear) -> instance
    alias self.new_inout self.alloc_inout

    def self.alloc_out: (Integer | Symbol | _Size size, ?Integer count, ?bool clear) -> instance
    alias self.new_out self.alloc_out

    def initialize: (Integer | Symbol | _Size size, Integer count, bool clear) -> instance

    def inspect: -> String

    def order:
      () -> (:big | :little)
    | (:big | :little | :network) -> self

    def slice: (Numeric offset, Numeric length) -> instance
  end
end
