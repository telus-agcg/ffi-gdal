module GDAL
  # A set of associated raster bands and info common to them all.  It's also
  # responsible for the georeferencing transform and coordinate system
  # definition of all bands.
  class Dataset
    include MajorObject

    include DatasetMixins::Matching

    include DatasetMixins::AlgorithmMethods

    include DatasetMixins::WarpMethods

    include GDAL::Logger

    ACCESS_FLAGS: untyped

    # @param path [String] Path to the file that contains the dataset.  Can be
    #   a local file or a URL.
    # @param access_flag [String] 'r' or 'w'.
    # @param shared [Boolean] Whether or not to open using GDALOpenShared
    #   vs GDALOpen. Defaults to +true+.
    def self.open: (untyped path, untyped access_flag, ?shared: bool shared) { (untyped) -> untyped } -> untyped

    # Copy all dataset raster data.
    #
    # This function copies the complete raster contents of one dataset to
    # another similarly configured dataset. The source and destination dataset
    # must have the same number of bands, and the same width and height. The
    # bands do not have to have the same data type.
    #
    # This function is primarily intended to support implementation of driver
    # specific CreateCopy() functions. It implements efficient copying, in
    # particular "chunking" the copy in substantial blocks and, if appropriate,
    # performing the transfer in a pixel interleaved fashion.
    #
    # @param source [GDAL::Dataset, FFI::Pointer]
    # @param destination [GDAL::Dataset, FFI::Pointer]
    # @param options [Hash]
    # @option options interleave: 'pixel'
    # @option options compressed: true
    # @option options skip_holes: true
    # @param progress_function [Proc]
    # @raise [GDAL::Error]
    def self.copy_whole_raster: (untyped source, untyped destination, ?::Hash[untyped, untyped] options, ?untyped? progress_function) -> untyped

    # @param dataset [GDAL::Dataset]
    # @return [FFI::AutoPointer]
    def self.new_pointer: (untyped dataset) -> untyped

    # @param pointer [FFI::Pointer]
    def self.release: (untyped pointer) -> (nil | untyped)

    # @return [FFI::Pointer] Pointer to the GDALDatasetH that's represented by
    #   this Ruby object.
    attr_reader c_pointer: untyped

    # @param path_or_pointer [String, FFI::Pointer] Path to the file that
    #   contains the dataset or a pointer to the dataset. If it's a path, it can
    #   be a local file or a URL.
    # @param access_flag [String] 'r' or 'w'.
    # @param shared_open [Boolean] Whether or not to open using GDALOpenShared
    #   vs GDALOpen. Defaults to +true+.
    def initialize: (untyped path_or_pointer, untyped access_flag, ?shared_open: bool shared_open) -> untyped

    # Close the dataset.
    def close: () -> untyped

    # @return [Symbol]
    def access_flag: () -> untyped

    # @return [GDAL::Driver] The driver to be used for working with this
    #   dataset.
    def driver: () -> untyped

    # Fetches all files that form the dataset.
    # @return [Array<String>]
    def file_list: () -> (::Array[untyped] | untyped)

    # Flushes all write-cached data to disk.
    def flush_cache: () -> untyped

    # @return [Integer]
    def raster_x_size: () -> (nil | untyped)

    # @return [Integer]
    def raster_y_size: () -> (nil | untyped)

    # @return [Integer]
    def raster_count: () -> (0 | untyped)

    # @param raster_index [Integer]
    # @return [GDAL::RasterBand]
    def raster_band: (untyped raster_index) -> untyped

    # @param type [FFI::GDAL::GDAL::DataType]
    # @param options [Hash]
    # @raise [GDAL::Error]
    # @return [GDAL::RasterBand, nil]
    def add_band: (untyped `type`, **untyped options) -> untyped

    # Adds a mask band to the dataset.
    #
    # @param flags [Array<Symbol>, Symbol] Any of the :GMF symbols.
    # @raise [GDAL::Error]
    def create_mask_band: (*untyped flags) -> untyped

    # @return [String]
    def projection: () -> untyped

    # @param new_projection [String] Should be in WKT or PROJ.4 format.
    # @raise [GDAL::Error]
    def projection=: (untyped new_projection) -> untyped

    # @return [GDAL::GeoTransform]
    # @raise [GDAL::Error]
    def geo_transform: () -> untyped

    # @param new_transform [GDAL::GeoTransform, FFI::Pointer]
    # @return [GDAL::GeoTransform]
    # @raise [GDAL::Error]
    def geo_transform=: (untyped new_transform) -> untyped

    # @return [Integer]
    def gcp_count: () -> (0 | untyped)

    # @return [String]
    def gcp_projection: () -> (::String | untyped)

    # @return [FFI::GDAL::GCP]
    def gcps: () -> untyped

    # @param resampling [String, Symbol] One of:
    #   * :nearest          - Nearest neighbor resampling
    #   * :gauss            - Gaussian kernel resampling
    #   * :cubic            - Cubic convolution resampling
    #   * :average          - Average of all non-NODATA
    #   * :mode             - Selects the value that occurs most often
    #   * :average_magphase - Averages complex data in mag/phase space
    #   * :none
    # @param overview_levels [Array<Integer>] The list of overview decimation
    #   factors to build.
    # @param band_numbers [Array<Integer>] The numbers of the bands to build
    #   overviews from.
    # @see http://www.gdal.org/gdaladdo.html
    # @raise [GDAL::Error]
    def build_overviews: (untyped resampling, untyped overview_levels, ?band_numbers: untyped? band_numbers) { () -> untyped } -> untyped

    # @param access_flag [String] 'r' or 'w'.
    # @param buffer [FFI::MemoryPointer] The pointer to the data to read/write
    #   to the dataset.
    # @param x_size [Integer] If not given, uses {{#raster_x_size}}.
    # @param y_size [Integer] If not given, uses {{#raster_y_size}}.
    # @param x_offset [Integer] The pixel number in the line to start operating
    #   on. Note that when using this, {#x_size} - +x_offset+ should be >= 0,
    #   otherwise this means you're telling the method to read past the end of
    #   the line. Defaults to 0.
    # @param y_offset [Integer] The line number to start operating on. Note that
    #   when using this, {#y_size} - +y_offset+ should be >= 0, otherwise this
    #   means you're telling the method to read more lines than the raster has.
    #   Defaults to 0.
    # @param buffer_x_size [Integer] The width of the buffer image in which to
    #   read/write the raster data into/from. Typically this should be the same
    #   size as +x_size+; if it's different, GDAL will resample accordingly.
    # @param buffer_y_size [Integer] The height of the buffer image in which to
    #   read/write the raster data into/from. Typically this should be the same
    #   size as +y_size+; if it's different, GDAL will resample accordingly.
    # @param buffer_data_type [FFI::GDAL::GDAL::DataType] Can be used to convert the
    #   data to a different type. You must account for this when reading/writing
    #   to/from your buffer--your buffer size must be +buffer_x_size+ *
    #   +buffer_y_size+.
    # @param band_numbers [Array<Integer>] The numbers of the bands to do IO on.
    #   Pass +nil+ defaults to choose the first band.
    # @param pixel_space [Integer] The byte offset from the start of one pixel
    #   value in the buffer to the start of the next pixel value within a line.
    #   If defaulted (0), the size of +buffer_data_type+ is used.
    # @param line_space [Integer] The byte offset from the start of one line in
    #   the buffer to the start of the next. If defaulted (0), the size of
    #   +buffer_data_type+ * +buffer_x_size* is used.
    # @param band_space [Integer] The byte offset from the start of one band's
    #   data to the start of the next. If defaulted (0), the size of
    #   +line_space+ * +buffer_y_size* is used.
    # @return [FFI::MemoryPointer] The buffer that was passed in.
    # @raise [GDAL::Error] On failure.
    # rubocop:disable Metrics/ParameterLists
    def raster_io: (untyped access_flag, ?untyped? buffer, ?x_size: untyped? x_size, ?y_size: untyped? y_size, ?x_offset: ::Integer x_offset, ?y_offset: ::Integer y_offset, ?buffer_x_size: untyped? buffer_x_size, ?buffer_y_size: untyped? buffer_y_size, ?buffer_data_type: untyped? buffer_data_type, ?band_numbers: untyped? band_numbers, ?pixel_space: ::Integer pixel_space, ?line_space: ::Integer line_space, ?band_space: ::Integer band_space) -> untyped

    # Creates a OGR::SpatialReference object from the dataset's projection.
    #
    # @return [OGR::SpatialReference]
    def spatial_reference: () -> (untyped | nil)

    private

    # Lets you pass in :GMF_ symbols that represent mask band flags and bitwise
    # ors them.
    #
    # @param flags [Symbol]
    # @return [Integer]
    def parse_mask_flag_symbols: (*untyped flags) -> untyped

    # @param buffer_data_type [FFI::GDAL::GDAL::DataType]
    # @param x_buffer_size [Integer]
    # @param y_buffer_size [Integer]
    # @return [Integer]
    def valid_min_buffer_size: (untyped buffer_data_type, untyped x_buffer_size, untyped y_buffer_size) -> untyped

    # Makes a pointer of +band_numbers+.
    #
    # @param band_numbers [Array<Integer>]
    # @return [Array<FFI::MemoryPointer, Integer>]
    def band_numbers_args: (untyped band_numbers) -> ::Array[untyped]
  end
end
