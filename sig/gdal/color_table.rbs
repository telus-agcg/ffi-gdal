module GDAL
  module ColorTableTypes
  end

  class ColorTable
    # @param color_table [GDAL::ColorTable]
    # @return [FFI::AutoPointer]
    def self.new_pointer: (untyped color_table) -> untyped

    # @param pointer [FFI::Pointer]
    def self.release: (untyped pointer) -> (nil | untyped)

    # @return [FFI::Pointer] C pointer to the C color table.
    attr_reader c_pointer: untyped

    # @param palette_interp_or_pointer [FFI::GDAL::PaletteInterp,
    #   FFI::Pointer]
    # @raise [GDAL::InvalidColorTable] If unable to create the color table.
    def initialize: (untyped palette_interp_or_pointer) -> untyped

    def destroy!: () -> untyped

    # Clones the ColorTable using the C API.
    #
    # @return [GDAL::ColorTable]
    def clone: () -> (nil | untyped)

    # Usually :GPI_RGB.
    #
    # @return [Symbol] One of FFI::GDAL::GDAL::PaletteInterp.
    def palette_interpretation: () -> untyped

    # @return [Integer]
    def color_entry_count: () -> untyped

    # @param index [Integer]
    # @return [GDAL::ColorEntry]
    def color_entry: (untyped index) -> untyped

    # @param index [Integer]
    # @return [GDAL::ColorEntry]
    def color_entry_as_rgb: (untyped index) -> (nil | untyped)

    # Add a new ColorEntry to the ColorTable.  Valid values depend on the image
    # type you're working with (i.e. for Tiff, values can be between 0 and
    # 65535).  Values must also be relevant to the PaletteInterp type you're
    # working with.
    #
    # @param index [Integer] The index of the color table's color entry to set.
    #   Must be between 0 and color_entry_count - 1.
    # @param one [Integer] The `c1` value of the GDAL::ColorEntry struct
    #   to set.
    # @param two [Integer] The `c2` value of the GDAL::ColorEntry struct
    #   to set.
    # @param three [Integer] The `c3` value of the GDAL::ColorEntry
    #   struct to set.
    # @param four [Integer] The `c4` value of the GDAL::ColorEntry
    #   struct to set.
    # @return [GDAL::ColorEntry]
    # rubocop:disable Metrics/ParameterLists
    def add_color_entry: (untyped index, ?untyped? one, ?untyped? two, ?untyped? three, ?untyped? four) -> untyped

    # Automatically creates a color ramp from one color entry to another.  It
    # can be called several times to create multiple ramps in the same color
    # table.
    #
    # @param start_index [Integer] Index to start the ramp on (0..255)
    # @param start_color [GDAL::ColorEntry] Value to start the ramp.
    # @param end_index [Integer] Index to end the ramp on (0..255)
    # @param end_color [GDAL::ColorEntry] Value to end the ramp.
    # @return [Integer] The total number of entries.  nil or -1 on error.
    def create_color_ramp!: (untyped start_index, untyped start_color, untyped end_index, untyped end_color) -> untyped
  end
end
