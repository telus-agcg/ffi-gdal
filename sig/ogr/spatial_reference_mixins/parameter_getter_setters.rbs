module OGR
  module SpatialReferenceMixins
    module ParameterGetterSetters
      # @param name [String] The case-insensitive tree node to look for.
      # @param child [Integer] The child of the node to fetch.
      # @return [String, nil]
      def attribute_value: (untyped name, ?::Integer child) -> untyped

      # @param path [String] Path to the node to update/set.  If nested, use the
      #   pipe symbol to denote nesting.  i.e. 'GEOCCS|UNIT'.
      # @param value [String] The new value for the node/path.  Should be a String,
      #   but if not, will be converted for you.
      # @raise [OGR::Failure]
      def set_attribute_value: (untyped path, untyped value) -> untyped

      # @return [Hash{unit_name: String, value: Float}]  +unit_name+ is the name
      #   of the unit type ("degree" or "radian").  +value+ is the number to
      #   multiply angular distances to transform them to radians.
      def angular_units: () -> { unit_name: untyped, value: untyped }

      # @param unit_label [String]
      # @param transform_to_radians [Float] The value to multiply an angle to
      #   transform the value to radians.
      # @raise [OGR::Failure]
      def set_angular_units: (untyped unit_label, untyped transform_to_radians) -> untyped

      # @return [Hash{unit_name: String, value: Float}]  +unit_name+ is the name
      #   of the unit type (e.g. "Meters"). +value+ is the number to multiply
      #   linear distances to transform them to meters.
      def linear_units: () -> { unit_name: untyped, value: untyped }

      # @param unit_label [String]
      # @param transform_to_meters [Float] The value to multiply a length to
      #   transform the value to meters.
      # @raise [OGR::Failure]
      def set_linear_units: (untyped unit_label, untyped transform_to_meters) -> untyped

      # Does the same as #set_linear_units, but also converts parameters to use
      # the new units.
      #
      # @param unit_label [String]
      # @param transform_to_meters [Float] The value to multiply a length to
      #   transform the value to meters.
      # @raise [OGR::Failure]
      def set_linear_units_and_update_parameters: (untyped unit_label, untyped transform_to_meters) -> untyped

      # The linear units for the projection.
      #
      # @param target_key [String] I.e. "PROJCS" or "VERT_CS".
      # @return [Hash]
      def target_linear_units: (untyped target_key) -> { unit_name: untyped, value: untyped }

      # @param target_key [String] The keyword to set linear units for ("PROJCS",
      #   "VERT_CS", etc.).
      # @param unit_label [String] Name of the units to be used.
      # @param transform_to_meters [Float] The value to multiple a length to
      #   transform the value to meters.
      # @raise [OGR::Failure]
      def set_target_linear_units: (untyped target_key, untyped unit_label, untyped transform_to_meters) -> untyped

      # @return [Hash]
      def prime_meridian: () -> { name: untyped, value: untyped }
    end
  end
end
